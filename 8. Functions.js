// Функции

// Ранее уже использовали функции
// 1. alert()
// 2. prompt()
// 3. console.log() -> log()
// console.log(1, 1);

// Создание своих функций
// 1. function
// 2. Название функции
// 3. Тело функции
// function log() {
//     // тело функции
//     console.log(1);
// }

// log(); // Вызов функции, пишем название функции.

// Код внутри функции
// 1. Внутренние переменные, функции
// 2. Внешние переменные (глобальные), функции
let b = 3; // глобальная или внешнаяя переменная по отношению к функции,
// хорошей практикой считается в глобальных перменных держать какие-то общие данные которые влияют на работу всего приложения
// и которые искользуют другие функции

function myFunc2() {
    console.log('Hello from myFunc2');
}

function myFunc() {
    let a = 5; // Переменная созданая внутри функции, существует только в ней, из вне она не будет вызываться
    console.log(a);
    console.log(b); // При этом переменная созданная снаружи функции может в ней использоваться 
    myFunc2(); // так же можно вызывать функцию которая сверку если задать ее в теле функции как в примере
}

myFunc();

// Передача значений в фукцию
// 1. Параметр - переменная в круглых скобках
// 2. Аргумент - значение, которое передается при вывове
function log1(text) { // Параметр находится в скобках
    console.log(text);
}

log1('Текст переданный в функцию'); // аргумент конкретное значение которое передали


// Возврат результат работы функции
let c = prompt('Введите число'); // функция вернула значение переменной в код
log1(c);

// В данном примере функция которая возвращает результат своей работы 
function getsum (a, b) { // 1. функция принимает на вход два значения 
    let result = a + b; // 2. внутри тела функции описана бизнес логика
                        // считаем значения a и b результат записывается в переменную result 

    return result; // 3. return возвращаем значение
}

let sum = getsum(6, 4);

log1(sum);

// Название функции (нейминг), ПРАВИЛЬНЫЙ НЕЙМИНГ ОЧЕНЬ ВАЖЕН, ОТ ЭТОГО ЗАВИСИТ ЧИТАЕМОСТЬ КОДА
// 1. getSomething() - возвращает значение 
// 2. setSomething() - устанавливает значение
// 3. isSomething() - проверяет значение (например на true / false)

let amount = 1; //  В глабоальной переменной например храним деньги

function setAmount (newAmount) { //  в setAmount мы можем передать новое значение денег в скобках ()
    amount = newAmount; //  в теле мы устанавливает значение 
}

function getAmount () { //  возвращаем значение amount
    return amount;      
}

setAmount(150);

log1(getAmount());

const ADULT_AGE = 18; // 1. Задается константа

function isAdult(Age) {  // 2. В функции ставим is так как нам нужно сравнение, в тело функции мы пишем
    return Age > ADULT_AGE;   // то что нам нужно сравнить 
}

let myAge = 19; // 3. Задаем переменную с которой нам нужно сравнить нашу константу

if (isAdult(myAge)) { // 4. В проверке мы пишем функцию в которой const ADULT_AGE 
    log1('Вы старше 18 лет!');
}

log1(isAdult(myAge));

console.log('-----------------')

// Задание 1
// Напишите функцию, которая перемножает 2 числа между собой. Числа передаются аргументами в функцию.

function multiply(number1, number2) { // 1. Называем функцию по смыслу, в скобках задаем два числа
    return number1 * number2; // 2. Перемножаем два числа и возвращаем их
}

const result = multiply(5, 5);

console.log(result); // 3. В скобках пишем числа которые хотим перемножить

// Задание 2
// Напишите функцию, которая находит самое большое число в массиве. Массив передается в функцию.

function getMax(arr) { // 1. Название массива (в скобках название массива)
    let result = arr[0];  // 2. Переменная массива, массив начинается с ноля

    for (let i = 1; i < arr.length; i++) { // 3. Логика нахождения большего числа в массиве
        if (arr[i] < result) continue;

        result = arr[i];
    }

    return result; 
}

const arr1 = [2, 45, 345, 1231];  // Темперь в этой функции мы можем задавать любую переменню и она нам посчитает макс число массива
const arr2 = [45, 123, 123, 314];

console.log(getMax(arr2));
console.log(getMax(arr1));
console.log(getMax([1, 2, 34]));


// Задание 3
// Напишите функцию, которая проверяет, является ли переданное число четным или нет. Число передается в функцию.
function isEven (number) {
    return number % 2 === 0; // Можем записать все в отдну троку
}

console.log(isEven(12));
console.log(isEven(13));

// Задание 4
// Напишите функцию, которая возвращает сумму всех числе из диапазон числе. 
// Диапазон задается начальным и конечным число. Оба числа передаются в функцию.
function getRangeSum(start, end) { // Используем входные параметры start и end чтобы запустить цикл
    let result = 0;

    for (let i = start; i <= end; i++) {
        result += i;
    }


    return result;
}

console.log(getRangeSum(1, 6));

// Задание 5
// Напишите функцию, которая проверяет, находится ли число в массиве или нет. 
// Число для проверки и массив передаются в функцию.
function contains(arr, number) { // 1. в скобках передаем Array and Number

    for (let i = 0; i <= arr.length; i++) { // 2. в теле циклапи пишем счетчик который пробегается по массиву
        if (arr[i] === number) {          // 3. Если у нас массив встретится с номер то вернется true
            return true;                 // 4. Возвращаем true
        }
    }

    return false;                       // 5. Возвращаем false (изначально)
}

console.log(contains([1, 2, 3],3)); // 6. выводим две консоли массивом и номером которые передаются в функцию
console.log(contains([1, 2, 3],5));


// Задание 6
// Напишите функцию, которая собирает (возвращает) полный урл страницы. 
// Функция на вход получает протокол (например, https), есть ли www в ссылке или нет, 
// доменное имя и доменную зону (например, .ru). 

// Пример полного урла: https://www.avito.ru

function buildUrl(protocol, withWWW, domain, zone) {
    let www = withWWW ? 'www': ''; // Тернарный оператор, после вопроса сперва пишем что нам нужно вернуть, 
    // а то что нет после двоеточия, оператор вместо if

    return `${protocol}://${www}.${domain}.${zone}`;
}

console.log(buildUrl('http', true, 'avito', 'ru')); // http://www.avito.ru 
console.log(buildUrl('http', false, 'avito', 'com')); // https://avito.com 


// Задание 7
// Напишите функцию filterOdds, которая принимает массив и возвращает новый массив, состоящий из нечетных значений входного массива.

function isOdd(number) {
    return number % 2 !== 0;
}


function filterOdds(arr) {
    const result = [];

    for (let i = 0; i < arr.length; i++) {
        if (!isOdd (arr[i])) continue;

        result.push(arr[i]);
    }

    return result;
}

console.log(filterOdds([1, 2, 3, 4, 5])) // [1, 3, 5]
console.log(filterOdds([1, 7, 3, 9, 5])) // [1, 7, 3, 9]

