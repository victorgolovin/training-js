// Функции

// Ранее уже использовали функции
// 1. alert()
// 2. prompt()
// 3. console.log() -> log()
// console.log(1, 1);

// Создание своих функций
// 1. function
// 2. Название функции
// 3. Тело функции
function log() {
    // тело функции
    console.log(1);
}

log(); // Вызов функции, пишем название функции.

// Код внутри функции
// 1. Внутренние переменные, функции
// 2. Внешние переменные (глобальные), функции
let b = 3; // глобальная или внешнаяя переменная по отношению к функции,
// хорошей практикой считается в глобальных перменных держать какие-то общие данные которые влияют на работу всего приложения
// и которые искользуют другие функции

function myFunc2() {
    console.log('Hello from myFunc2');
}

function myFunc() {
    let a = 5; // Переменная созданая внутри функции, существует только в ней, из вне она не будет вызываться
    console.log(a);
    console.log(b); // При этом переменная созданная снаружи функции может в ней использоваться 
    myFunc2(); // так же можно вызывать функцию которая сверку если задать ее в теле функции как в примере
}

myFunc();

// Передача значений в фукцию
// 1. Параметр - переменная в круглых скобках
// 2. Аргумент - значение, которое передается при вывове
function log1(text) { // Параметр находится в скобках
    console.log(text);
}

log1('Текст переданный в функцию'); // аргумент конкретное значение которое передали


// Возврат результат работы функции
let c = prompt('Введите число'); // функция вернула значение переменной в код
log1(c);

// В данном примере функция которая возвращает результат своей работы 
function getsum (a, b) { // 1. функция принимает на вход два значения 
    let result = a + b; // 2. внутри тела функции описана бизнес логика
                        // считаем значения a и b результат записывается в переменную result 

    return result; // 3. return возвращаем значение
}

let sum = getsum(6, 4);

log1(sum);

// Название функции (нейминг), ПРАВИЛЬНЫЙ НЕЙМИНГ ОЧЕНЬ ВАЖЕН, ОТ ЭТОГО ЗАВИСИТ ЧИТАЕМОСТЬ КОДА
// 1. getSomething() - возвращает значение 
// 2. setSomething() - устанавливает значение
// 3. isSomething() - проверяет значение (например на true / false)

let amount = 1; //  В глабоальной переменной например храним деньги

function setAmount (newAmount) { //  в setAmount мы можем передать новое значение денег в скобках ()
    amount = newAmount; //  в теле мы устанавливает значение 
}

function getAmount () { //  возвращаем значение amount
    return amount;      
}

setAmount(150);

log1(getAmount());

const ADULT_AGE = 18; // 1. Задается константа

function isAdult(Age) {  // 2. В функции ставим is так как нам нужно сравнение, в тело функции мы пишем
    return Age > ADULT_AGE;   // то что нам нужно сравнить 
}

let myAge = 19; // 3. Задаем переменную с которой нам нужно сравнить нашу константу

if (isAdult(myAge)) { // 4. В проверке мы пишем функцию в которой const ADULT_AGE 
    log1('Вы старше 18 лет!');
}

log1(isAdult(myAge));


// Задание 1
// Напишите функцию, которая перемножает 2 числа между собой. Числа передаются аргументами в функцию.


// Задание 2
// Напишите функцию, которая находит самое большое число в массиве. Массив передается в функцию.


// Задание 3
// Напишите функцию, которая проверяет, является ли переданное число четным или нет. Число передается в функцию.


// Задание 4
// Напишите функцию, которая возвращает сумму всех числе из диапазон числе. 
// Диапазон задается начальным и конечным число. Оба числа передаются в функцию.


// Задание 5
// Напишите функцию, которая проверяет, находится ли число в массиве или нет. 
// Число для проверки и массив передаются в функцию.


// Задание 6
// Напишите функцию, которая собирает (возвращает) полный урл страницы. 
// Функция на вход получает протокол (например, https), есть ли www в ссылке или нет, доменное имя и доменную зону (например, .ru). 

// Пример полного урла: https://www.avito.ru


// Задание 7
// Напишите функцию filterOdds, которая принимает массив и возвращает новый массив, состоящий из нечетных значений входного массива.

